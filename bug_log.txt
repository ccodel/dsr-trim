sr_parser.c:
    - When calculating min/max_clause_to_check, was previously setting the min and max to check for lit and neg_lit when subst_pair_incomplete was true, but it should be for when it is false, since we want to check clauses containing the literal that gets mapped under the substitution.
    - Previously was adding the pivot to the witness array. Now omits it.
    - When comparing hints[hint_index], I computed -(hints[hint_index] - 1) == i. Because the hint is negative, should have added one to map it from "printable" into 0-indexed.

lsr-check:
    (4/15/24): Not incrementing alpha_generation when a RAT clause is indicated but has no hints (see comment on line 249 of lsr-check.c).
    (1/7/25): When implementing EAGER proof checking, the first/last updates were assuming the literals of interest are in the candidate clause. But now we must perform FLUs as we check the formula, and so an explicit clause_index is passed. Otherwise, we try to RAT check clauses beyond where we've checked so far.

dsr-trim:
    - Some invariant regarding candidate_assumed_literals_index/candidate_unit_clauses_index and RAT_assumed_literals_index/RAT_unit_literals_index was off. Refactored into increment/decrement_state(). (Needs better name.)
        - Currently increments candidate_unit_literals_index/RAT etc. when assume_unit_literal() is called, but can be computed more efficiently by setting it separately.
            - The benefits for doing this are super small.
    - Was clearing the lsr_line_size after assuming the candidate clause, leading to RAT derivations being printed when candidate UP was found. Cleared before.
    - Substitutions were set using current_generation, but were then cleared after the first RAT clause. Created a new subst_generation value to run separately from current_generation.
        - TODO: Refactor for sr-check
        - TODO: Rename current_generation (to alpha_generation?)
    - The ret val of get_lit_under_subst() can return SUBST_UNASSIGNED. Taking the up_reason of that variable gives 0 always, because I computed it before re-assigning back to the original lit.

    - (3/27/24) When doing witness minimization, the write_index was not incremented twice when writing a literal mapping, leading to non-deleted witness mappings after minimization.
    - (4/9/24) Was not adding the clause hash when adding a new clause.
    - (4/14/24) Was not removing the added literals to lits_db when deleting a clause in the DSR format. As a result, the next addition clause included all the literals of the previous deletion clause.
    - (4/15/24) When deleting a clause, the watch pointers must also be removed. But the call to delete_clause() came first, which caused a garbage collection/realloc() call to shift the underlying literals, and so the correct watch pointers weren't removed at all, leading to a spurious RAT check.
    - (4/30/24) When adding a unit clause, it is possible that global UP has already set the unit literal to true. In that case, marking which clauses to include in global UP hints stops at the newly-added unit clause, but the reason is the prior clause, which may depend on other UP hints. The fix is to replace the unit literal's reason, and the unit_clause, with the newly-added unit clause. TODO is what to do if the previous clause is also unit (meaning there is a duplicate), and whether to delete the previous clause. Debugging method was to print when clauses became globally unit and detecting that the global unit matched the unit clause added in Schur.

global_parsing.c:
    - Not taking the absolute value of a token, meaning that negative tokens get "mapped twice."

compress/decompress.c:
    - Writing a zero and then a newline character adds an extra space, which won't interfere with parsing, but makes the diff command line tool complain.
    - (4/9/24) Was expecting to read two zeros per addition line in DSR format. But these lines only have one zero per line.
    - (4/9/24) Was expecting text lines to start with solely numbers (isdigit()). Instead, lines can start with '-' or 'd'.